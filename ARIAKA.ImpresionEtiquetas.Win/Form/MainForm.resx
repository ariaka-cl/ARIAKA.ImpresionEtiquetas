<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAADS3lQA0t5UANLeVBjS3lSw0t5VXNLeVZjS3lTM0t5UrNLeVBzS3lQA0t5UANLeVAAAA
        AAAAAAAAAAAAADS3lQA0t5UBNLeVPDS3laI0t5XKNLeVvTS3lao0t5VoNLeVqzS3lXc0t5VjNLeVDDS3
        lQA0t5UAAAAAADS3lQA0t5UFNLeVazS3ldQ0t5WLNLeVMjS3lQ40t5UFNLeVCzS3lao0t5WRNLeVxTS3
        laI0t5UZNLeVAAAAAAA0t5UBNLeVXzS3ldU0t5VQNLeVATS3lQA0t5UANLeVADS3lQA0t5V3NLeVmjS3
        lSQ0t5W2NLeVozS3lQ00t5UANLeVKTS3lc40t5VgNLeVADS3lQAAAAAAAAAAAAAAAAA0t5UANLeVRDS3
        lcY0t5USNLeVJDS3lc00t5ViNLeVADS3lYU0t5W3NLeVCzS3lQAAAAAAAAAAAAAAAAAAAAAAAAAAADS3
        lSc0t5XRNLeVMDS3lQA0t5VxNLeVujS3lQ40t5XFNLeVdzS3lQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA0t5UbNLeV0zS3lUo0t5UANLeVLjS3ldA0t5UyNLeV2DS3lVk0t5UAAAAAADS3lQA0t5UANLeVADS3
        lQA0t5UANLeVIjS3leA0t5VaAAAAADS3lRo0t5XMNLeVSDS3ldM0t5VjNLeVAAAAAAA0t5ULNLeVGDS3
        lQQ0t5UANLeVBjS3lW80t5XyNLeVRDS3lQA0t5UgNLeVzjS3lUA0t5WqNLeVljS3lQE0t5UANLeVETS3
        lWE0t5WFNLeVjDS3lbA0t5XwNLeVtzS3lRI0t5UANLeVSTS3lcw0t5UfNLeVVDS3ldE0t5UqNLeVADS3
        lQA0t5UFNLeVLjS3lWY0upWCNLyUbTPJkx1GTK8ANLaVCDS3laU0t5WTNLeVAzS3lQs0t5WiNLeVqzS3
        lRM0t5UANLeVADS3lQA1rZYAQQCuI0AArXhBAK15SSezIzS5lVw0t5XRNLeVLDS3lQA0t5UANLeVITS3
        lbo0t5WsNLeVLzS3lQI0uJUAQQCuEUAArL1AAKz/RBOv/1dfwbY8s6BjNLeUUDS3lQAAAAAAAAAAADS3
        lQA0t5UeNLeVmTS3lc80t5WaNLqVYjtQokpAAKzqQAGs/006t/9eiM7oXKTYKFGduwA0t5UAAAAAAAAA
        AAA0t5UANLeVADS3lQU0t5U8NLeVhTS4la81o5huQACso0QSr/lYZ8P4XprWoFqy4wsuvI0AAAAAAAAA
        AAAAAAAAAAAAADS3lQA0t5UANLeVADS3lQA0tpUHM8mSCT4BqhdKLbRhXHnIX1+f2RVdqd4AAAAAAAAA
        AAAAAAAA8B8AAMAHAACAAwAAB4EAAB+BAAAfiAAAP4gAAD+IAAAxCAAAEAgAABgQAAAPAQAAggMAAMAH
        AADgBwAA/A8AAA==
</value>
  </data>
</root>